{"version":3,"sources":["logo.svg","components/ImageEditor.jsx","App.js","reportWebVitals.js","index.js"],"names":["initialLabel","id","v4","label","size","left","top","color","ImageEditor","imageUrl","imageRef","useRef","useState","showAddLabelDialog","setShowAddLabelDialog","editingLabel","setEditingLabel","setLabel","labels","setLabels","useScreenshot","image","takeScreenshot","useEffect","name","extension","a","document","createElement","href","download","createFileName","click","updateDrawLabel","filteredLabel","find","lab","splice","push","Image","ref","markLabelForChange","savedLabel","className","onClick","current","onChange","e","target","value","changeLabels","React","forwardRef","props","src","map","style","position","fontSize","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.88877a38.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { useEffect, useRef, useState } from \"react\" \nimport Draggable from \"react-draggable\"\nimport { v4 } from 'uuid'\nimport { useScreenshot, createFileName } from 'use-react-screenshot'\n\n\nconst initialLabel = () => ({\n    id: v4(),\n    label: \"\",\n    size: 14,\n    left: 0,\n    top: 0,\n    color: \"white\"\n})\n\nexport const ImageEditor = ({ imageUrl }) => {\n    const imageRef = useRef();\n    const [showAddLabelDialog, setShowAddLabelDialog] = useState(false)\n    const [editingLabel, setEditingLabel] = useState(false)\n    const [label, setLabel] = useState(initialLabel())\n    const [labels, setLabels] = useState([])\n    const [image, takeScreenshot] = useScreenshot()\n\n    const getImage = () => takeScreenshot(imageRef.current)\n\n    const download = (image, { name = 'img', extension = 'png' } = {}) => {\n        const a = document.createElement('a')\n        a.href = image\n        a.download = createFileName(extension, name)\n        a.click()\n    }\n\n    useEffect(() => {\n        if (image) {\n            download(image, { name: 'lorem-ipsum', extension: 'png' })\n        }\n    }, [image])\n\n    const addLabel = () => {\n        setLabel(initialLabel())\n        setShowAddLabelDialog(true)\n    }\n\n    const updateDrawLabel = () => {\n        const filteredLabel = labels.find(lab => lab.id === label.id)\n\n        if (filteredLabel)\n            labels.splice(filteredLabel, 1)\n\n        labels.push(label)\n        setLabels([...labels])\n    }\n\n    const saveLabel = () => {\n        updateDrawLabel()\n        setLabel(initialLabel())\n        setShowAddLabelDialog(false)\n    }\n\n    const markLabelForChange = (savedLabel) => {\n        setEditingLabel(true)\n        setLabel(savedLabel)\n    }\n\n    const changeLabels = ({ target }) => {\n        label.label = target.value\n        setLabel({ ...label })\n    }\n\n    const up = () => {\n        label.top--;\n        setLabel({ ...label })\n        updateDrawLabel()\n    }\n\n    const down = () => {\n        label.top++;\n        setLabel({ ...label })\n        updateDrawLabel()\n    }\n\n    const left = () => {\n        label.left--;\n        setLabel({ ...label })\n        updateDrawLabel()\n    }\n\n    const right = () => {\n        label.left++;\n        setLabel({ ...label })\n        updateDrawLabel()\n    }\n\n    const increaseSize = () => {\n        label.size++;\n        setLabel({ ...label })\n        updateDrawLabel()\n    }\n\n    const decreaseSize = () => {\n        label.size--;\n        setLabel({ ...label })\n        updateDrawLabel()\n    }\n\n    const finishEditingLabel = () => {\n        setEditingLabel(false);\n        setLabel(initialLabel())\n    }\n\n    return <>\n\n        <Image ref={imageRef}\n            labels={labels}\n            imageUrl={imageUrl}\n            markLabelForChange={markLabelForChange}\n        />\n\n        {editingLabel || <div className='actions'>\n            <button onClick={() => addLabel()}>Adicionar Texto</button>\n            <button onClick={() => getImage()}>Export</button>\n        </div>}\n\n        {editingLabel && <>\n            <button onClick={() => up()}>Up</button>\n            <button onClick={() => down()}>Down</button>\n            <button onClick={() => left()}>Left</button>\n            <button onClick={() => right()}>Right</button>\n            <button onClick={() => increaseSize()}>Increase Size</button>\n            <button onClick={() => decreaseSize()}>Decrease Size</button>\n            <button onClick={() => finishEditingLabel()}>Finish</button>\n        </>}\n\n        {showAddLabelDialog && <>\n            <label>Digite o texto</label>\n            <input name='label' onChange={e => changeLabels(e)} />\n            <button onClick={() => saveLabel()} >Salvar</button>\n        </>}\n    </>\n}\n\n\nconst Image = React.forwardRef((props, ref) => (\n    <div id='image-for-export' ref={ref} >\n        <img src={props.imageUrl} />\n        {props.labels.map(savedLabel => <>\n            <Draggable>\n                <label style={{ left: savedLabel.left, top: savedLabel.top, position: \"absolute\", color: savedLabel.color, fontSize: savedLabel.size }} onClick={() => props.markLabelForChange(savedLabel)} >{savedLabel.label}</label>\n            </Draggable>\n        </>)}\n    </div>\n))","import logo from './logo.svg';\nimport './App.css';\nimport { ImageEditor } from './components/ImageEditor';\n\nfunction App() {\n  return (\n    <ImageEditor \n      imageUrl=\"https://liturgiadashoras.online/comunidade/wp-content/uploads/2021/05/sao-filipe-neri.jpg\"\n    />\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}